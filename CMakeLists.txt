CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

project("zd")
SET(NAME "zdtest")

set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")

FILE(GLOB SOURCES "src/*.cpp" "src/ZD/*.cpp")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF()
MESSAGE("${CMAKE_BUILD_TYPE}")

#unix
IF (UNIX AND NOT ANDROID AND NOT EMSCRIPTEN AND NOT WIN32)
  MESSAGE("Unix build")

  ADD_EXECUTABLE(${NAME} "${SOURCES}")

  INCLUDE_DIRECTORIES("src/ZD/" "src/")

  ADD_DEFINITIONS(-DNAME="${NAME}")

  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -ggdb -fsanitize=address,leak -fno-omit-frame-pointer -Wall -Wextra -DDEBUG -O0")
  #SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -ggdb -fsanitize=memory -fno-omit-frame-pointer -Wall -Wextra")
  SET(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -s -DNDEBUG")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -s -O3 -DNDEBUG")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -std=c++2a -Wall")

  SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build/")

  FIND_PACKAGE (glfw3 REQUIRED)
  FIND_PACKAGE (GLEW)
  INCLUDE_DIRECTORIES (${GLFW_INCLUDE_DIR})
  INCLUDE_DIRECTORIES (${GLEW_INCLUDE_DIR})
  
  TARGET_LINK_LIBRARIES(${NAME} stdc++ GL GLU GLEW glfw X11 pthread)

  add_custom_target(run
    COMMAND ./build/${NAME}
    DEPENDS ${NAME}
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
  )

ENDIF()
